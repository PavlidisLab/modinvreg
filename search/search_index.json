{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Rare Disease Project Registry for model organism researchers, developed for the Canadian Rare Disease Models & Mechanisms Network","title":"Rare Disease Project"},{"location":"#rare-disease-project","text":"Registry for model organism researchers, developed for the Canadian Rare Disease Models & Mechanisms Network","title":"Rare Disease Project"},{"location":"customization/","text":"Customize your instance Additional database configurations The Web application will auto-magically initialize the database and fill the tables with gene orthologs data. Since this can be pretty expensive to run each time the server is restarted, you should set the following to skip initialization: spring.datasource.initialize=false Gene information and GO terms ontology Gene information and GO terms ontology are downloaded from NCBI and scheduled for update on a monthly basis. There are a couple of ways this process can be configured to prevent periodic update or to use data from the local filesystem. rdp.settings.cache.enabled=true rdp.settings.cache.load-from-disk=false By default, rgr will retrieve the latest genes and gene-term associations from NCBI, and GO terms from Ontobee . Users genes and terms will be updated in the aftermath of a successful update. However, if you choose to load data from the disk, you must provide a location where gene and GO terms can be downloaded relative to the working directory of the Web application. rdp.settings.cache.gene-files-location=genes rdp.settings.cache.term-file=go.obo rdp.settings.cache.annotation-file=gene2go.gz With the above settings and given that Homo sapiens taxon is enabled, rgr will retrieve gene information from genes/Homo_sapiens.gene_info.gz . Internationalization and custom messages Some text displayed in rgr can be customized and internationalized. To do so, create a messages.properties file in the working directory of the Web application add the entries you want to change. Default values are found in messages.properties You can use suffixed like messages_en_CA.properties for region-specific localization. Note that application-prod.properties is also used for messages for backward compatibility. New and existing messages should be moved to messages.properties . FAQ The FAQ can be customized in faq.properties . Location: Specified using -Dspring.config.location=file:<location> Defaults: Empty Contents: All of the question and answer style items that will display in the frequently asked questions page. Each entry requires two parts: rdp.faq.questions.<q_key> and rdp.faq.answers.<q_key> which hold the question and the corresponding answer, respectively. Example: https://github.com/PavlidisLab/modinvreg/blob/master/faq.properties login.properties Location: Working directory of running jar Defaults: https://github.com/PavlidisLab/modinvreg/blob/master/src/main/resources/application.properties Contents: Create this file if you would like to customise spring specific messages such as incorrect username/password. Notes The organisms table is prepopulated on creation however all but human are turned off. Set the active column to 1 in the database to turn on an organism (Example (this will activate mouse): update taxon set active=1 where taxon_id=10090 ) If a required table is not found in the database upon application startup it will create it, it will NOT delete existing data. In order to access the RDMMN shared data system (international search), your application must use HTTPs. If you do not have HTTPs setup for you domain, you can consult the following guides on how to set it up: medium.com/@raupach/how-to-install-lets-encrypt-with-tomcat-3db8a469e3d2 community.letsencrypt.org/t/configuring-lets-encrypt-with-tomcat-6-x-and-7-x/32416 Ortholog mapping There is a static ortholog mapping included with the application, that will automatically populate the database on startup. For future updates of the ortholog mapping, you can watch the data.sql file for changes, and run the ortholog part on your database when that happens. Building from source You can customize rgr by editing the publicly available source code and packaging the JAR archive yourself. git clone https://github.com/PavlidisLab/rgr.git cd rgr/ # edit what you want... ./mvnw package The new build will be available in the target directory.","title":"Customize your instance"},{"location":"customization/#customize-your-instance","text":"","title":"Customize your instance"},{"location":"customization/#additional-database-configurations","text":"The Web application will auto-magically initialize the database and fill the tables with gene orthologs data. Since this can be pretty expensive to run each time the server is restarted, you should set the following to skip initialization: spring.datasource.initialize=false","title":"Additional database configurations"},{"location":"customization/#gene-information-and-go-terms-ontology","text":"Gene information and GO terms ontology are downloaded from NCBI and scheduled for update on a monthly basis. There are a couple of ways this process can be configured to prevent periodic update or to use data from the local filesystem. rdp.settings.cache.enabled=true rdp.settings.cache.load-from-disk=false By default, rgr will retrieve the latest genes and gene-term associations from NCBI, and GO terms from Ontobee . Users genes and terms will be updated in the aftermath of a successful update. However, if you choose to load data from the disk, you must provide a location where gene and GO terms can be downloaded relative to the working directory of the Web application. rdp.settings.cache.gene-files-location=genes rdp.settings.cache.term-file=go.obo rdp.settings.cache.annotation-file=gene2go.gz With the above settings and given that Homo sapiens taxon is enabled, rgr will retrieve gene information from genes/Homo_sapiens.gene_info.gz .","title":"Gene information and GO terms ontology"},{"location":"customization/#internationalization-and-custom-messages","text":"Some text displayed in rgr can be customized and internationalized. To do so, create a messages.properties file in the working directory of the Web application add the entries you want to change. Default values are found in messages.properties You can use suffixed like messages_en_CA.properties for region-specific localization. Note that application-prod.properties is also used for messages for backward compatibility. New and existing messages should be moved to messages.properties .","title":"Internationalization and custom messages"},{"location":"customization/#faq","text":"The FAQ can be customized in faq.properties . Location: Specified using -Dspring.config.location=file:<location> Defaults: Empty Contents: All of the question and answer style items that will display in the frequently asked questions page. Each entry requires two parts: rdp.faq.questions.<q_key> and rdp.faq.answers.<q_key> which hold the question and the corresponding answer, respectively. Example: https://github.com/PavlidisLab/modinvreg/blob/master/faq.properties login.properties Location: Working directory of running jar Defaults: https://github.com/PavlidisLab/modinvreg/blob/master/src/main/resources/application.properties Contents: Create this file if you would like to customise spring specific messages such as incorrect username/password.","title":"FAQ"},{"location":"customization/#notes","text":"The organisms table is prepopulated on creation however all but human are turned off. Set the active column to 1 in the database to turn on an organism (Example (this will activate mouse): update taxon set active=1 where taxon_id=10090 ) If a required table is not found in the database upon application startup it will create it, it will NOT delete existing data. In order to access the RDMMN shared data system (international search), your application must use HTTPs. If you do not have HTTPs setup for you domain, you can consult the following guides on how to set it up: medium.com/@raupach/how-to-install-lets-encrypt-with-tomcat-3db8a469e3d2 community.letsencrypt.org/t/configuring-lets-encrypt-with-tomcat-6-x-and-7-x/32416","title":"Notes"},{"location":"customization/#ortholog-mapping","text":"There is a static ortholog mapping included with the application, that will automatically populate the database on startup. For future updates of the ortholog mapping, you can watch the data.sql file for changes, and run the ortholog part on your database when that happens.","title":"Ortholog mapping"},{"location":"customization/#building-from-source","text":"You can customize rgr by editing the publicly available source code and packaging the JAR archive yourself. git clone https://github.com/PavlidisLab/rgr.git cd rgr/ # edit what you want... ./mvnw package The new build will be available in the target directory.","title":"Building from source"},{"location":"deployment/","text":"Deployment This section expands the process of deploying in a production environment. Make sure you are familiarized with the installation procedure first before attempting the described steps. Administrative user Your rgr instance is initialized with an administrator user. Make sure you change its default password before exposing your application to the Internet. Web server There a few options you will likely want to specify when deploying your rgr instance. -Dserver.port=<port> : Port for the webserver to listen on. -Dspring.config.location=file:<faq location> : Location to find the FAQ question & answers -Djava.security.egd=file:/dev/./urandom : Specify this if you receive logs such as: \"Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [235,853] milliseconds.\" The secure random calls may be blocking as there is not enough entropy to feed them in /dev/random . Application cd /project/directory wget https://github.com/PavlidisLab/modinvreg/releases/download/vx.x/rdp-x.x.x.jar create application-prod.properties, faq.properties and optionally login.properties test run the jar: java -Dserver.port=8080 -Dspring.config.location=file:faq.properties -Djava.security.egd=file:/dev/./urandom -jar rdp-x.x.x.jar (Optional) Log into the database and activate other organisms. Set up jar as systemd service: create file /etc/systemd/system/rdp.service containing similar to the following: Integration with systemd If you are not using a container technology such as Docker, we recommend that you use a systemd service unit to deploy your rgr instance. [Unit] Description=rdp After=syslog.target [Service] User=tomcat Group=tomcat WorkingDirectory=/project/directory ExecStart=/bin/java -Xms256m -Xmx3g -Dserver.port=8083 -Dspring.config.location=file:faq.properties -Djava.security.egd=file:/dev/./urandom -jar rdp-x.x.x.jar SuccessExitStatus=143 [Install] WantedBy=multi-user.target Start service: systemctl start rdp.service View logs: journalctl -f -u rdp.service Apache Create a standard virtualhost with the following proxies: ProxyPass / http://localhost:<port>/ ProxyPassReverse / http://localhost:<port>/ For custom deployments see: https://docs.spring.io/spring-boot/docs/current/reference/html/cloud-deployment.html To install as a system service see: https://docs.spring.io/spring-boot/docs/current/reference/html/deployment-install.html","title":"Deployment"},{"location":"deployment/#deployment","text":"This section expands the process of deploying in a production environment. Make sure you are familiarized with the installation procedure first before attempting the described steps.","title":"Deployment"},{"location":"deployment/#administrative-user","text":"Your rgr instance is initialized with an administrator user. Make sure you change its default password before exposing your application to the Internet.","title":"Administrative user"},{"location":"deployment/#web-server","text":"There a few options you will likely want to specify when deploying your rgr instance. -Dserver.port=<port> : Port for the webserver to listen on. -Dspring.config.location=file:<faq location> : Location to find the FAQ question & answers -Djava.security.egd=file:/dev/./urandom : Specify this if you receive logs such as: \"Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [235,853] milliseconds.\" The secure random calls may be blocking as there is not enough entropy to feed them in /dev/random .","title":"Web server"},{"location":"deployment/#application","text":"cd /project/directory wget https://github.com/PavlidisLab/modinvreg/releases/download/vx.x/rdp-x.x.x.jar create application-prod.properties, faq.properties and optionally login.properties test run the jar: java -Dserver.port=8080 -Dspring.config.location=file:faq.properties -Djava.security.egd=file:/dev/./urandom -jar rdp-x.x.x.jar (Optional) Log into the database and activate other organisms. Set up jar as systemd service: create file /etc/systemd/system/rdp.service containing similar to the following:","title":"Application"},{"location":"deployment/#integration-with-systemd","text":"If you are not using a container technology such as Docker, we recommend that you use a systemd service unit to deploy your rgr instance. [Unit] Description=rdp After=syslog.target [Service] User=tomcat Group=tomcat WorkingDirectory=/project/directory ExecStart=/bin/java -Xms256m -Xmx3g -Dserver.port=8083 -Dspring.config.location=file:faq.properties -Djava.security.egd=file:/dev/./urandom -jar rdp-x.x.x.jar SuccessExitStatus=143 [Install] WantedBy=multi-user.target Start service: systemctl start rdp.service View logs: journalctl -f -u rdp.service","title":"Integration with systemd"},{"location":"deployment/#apache","text":"Create a standard virtualhost with the following proxies: ProxyPass / http://localhost:<port>/ ProxyPassReverse / http://localhost:<port>/ For custom deployments see: https://docs.spring.io/spring-boot/docs/current/reference/html/cloud-deployment.html To install as a system service see: https://docs.spring.io/spring-boot/docs/current/reference/html/deployment-install.html","title":"Apache"},{"location":"installation/","text":"Installation This section describe the essential steps to install and run an RDP instance. Requirements Java 8+ MySQL 5.5+ or equivalent SMTP mail server Obtain a distribution of RDP Download the latest jar distribution from GitHub. wget https://github.com/PavlidisLab/rgr/releases/download/v1.3.2/rdp-1.3.2.jar The jar contains the core application, including an embedded webserver (Tomcat 8.5.x), a task scheduler, an in-memory cache, and much more! Setup the MySQL database Create the database and an associated user that the application will use to store and retrieve data. create database <database name> character set utf8mb4 collate utf8mb4_unicode_ci; create user '<database username>'@'%' identified by '<database password>'; grant all on rdp.* to '<database username>'@'%'; Setup application.properties In the working directory of the Web application, create an application.properties file that contains at least the following entries: spring.profiles.active=prod spring.datasource.url=jdbc:mysql://<database host>:3306/<database name> spring.datasource.username=<database username> spring.datasource.password=<database password> spring.mail.host=<mail host> spring.mail.port=587 spring.mail.username=<mail username> spring.mail.password=<mail password> spring.mail.properties.mail.smtp.auth=true spring.mail.properties.mail.smtp.starttls.enable=true This file contains the database and SMTP credentials and various runtime configurations. Make sure it's only readable by the user that will run the instance. Take a look at application.properties for detailed documentation and default values. That should be enough to get the Web service started. Now you can launch it be issuing the following command: java -jar rdp-1.3.2.jar If your email server is not configured properly, you will see an error from the Spring Actuator health check. You can detect further issues by looking at the /admin/health endpoint with administrative privilege. Next, we will see how the Web application can be customized further.","title":"Installation"},{"location":"installation/#installation","text":"This section describe the essential steps to install and run an RDP instance.","title":"Installation"},{"location":"installation/#requirements","text":"Java 8+ MySQL 5.5+ or equivalent SMTP mail server","title":"Requirements"},{"location":"installation/#obtain-a-distribution-of-rdp","text":"Download the latest jar distribution from GitHub. wget https://github.com/PavlidisLab/rgr/releases/download/v1.3.2/rdp-1.3.2.jar The jar contains the core application, including an embedded webserver (Tomcat 8.5.x), a task scheduler, an in-memory cache, and much more!","title":"Obtain a distribution of RDP"},{"location":"installation/#setup-the-mysql-database","text":"Create the database and an associated user that the application will use to store and retrieve data. create database <database name> character set utf8mb4 collate utf8mb4_unicode_ci; create user '<database username>'@'%' identified by '<database password>'; grant all on rdp.* to '<database username>'@'%';","title":"Setup the MySQL database"},{"location":"installation/#setup-applicationproperties","text":"In the working directory of the Web application, create an application.properties file that contains at least the following entries: spring.profiles.active=prod spring.datasource.url=jdbc:mysql://<database host>:3306/<database name> spring.datasource.username=<database username> spring.datasource.password=<database password> spring.mail.host=<mail host> spring.mail.port=587 spring.mail.username=<mail username> spring.mail.password=<mail password> spring.mail.properties.mail.smtp.auth=true spring.mail.properties.mail.smtp.starttls.enable=true This file contains the database and SMTP credentials and various runtime configurations. Make sure it's only readable by the user that will run the instance. Take a look at application.properties for detailed documentation and default values. That should be enough to get the Web service started. Now you can launch it be issuing the following command: java -jar rdp-1.3.2.jar If your email server is not configured properly, you will see an error from the Spring Actuator health check. You can detect further issues by looking at the /admin/health endpoint with administrative privilege. Next, we will see how the Web application can be customized further.","title":"Setup application.properties"},{"location":"migration/","text":"Migrate from previous releases Your current data should not be lost while migrating, but you should definitely have a database backup in case things go wrong for any reason. Read about database backup options for MySQL . First, take down your running instance to make sure that the previous release will not interfere with the migration process. Then, run the newer application release with the following parameter in application.properties : spring.datasource.initialize=true which will update the database to support the latest model definitions. If you get any errors during any part of the following process, please contact us. Once the update is successful, you should revert the option back to false to speed up future restarts. Take a look in the sections below for version-specific migration procedures. As of 1.3.2, database migrations are automated with Flyway which will run at startup of the application. This behaviour can be disabled with the following parameter in application.properties : flyway.enabled=false Migrate from 1.3 to 1.4 Gene informations are now stored in the database. As a result, taxons are known for ortholog genes and the ortholog_taxon column has become unnecessary, and a source of error for Hibernate. V1.4.0__drop_ortholog_target_taxon.sql Migrate from 1.3.x to 1.3.2 NCBI gene broke because they introduced genes with unexpected date format. We adjusted our parsing code to process date formats and now store a DATE type in the database. V1.3.2__fix_gene_modification_date_type.sql Migrate from version 1.1.x to 1.2 There are new security settings that can be added to your application.properties file. See the section 'Privacy and search Defaults' in the 'Customize Settings' example file. The new security settings will have to be back-filled for the users that have registered prior to this update. This can be done by directly editing the database entries like so: update user set hide_genelist = 0, privacy_level = 0, shared = 1; The values of these settings should correspond with the defaults you have set in your application-prod.properties file. Specifically: - hide_genelist = X if X =1, hides users gene list from public searches. is only effective when the setting rdp.settings.privacy.allow-hide-genelist is enabled. - privacy_level = X where X is the privacy level. Should have the same value as rdp.settings.privacy.default-level , or whatever the users prior to this update agreed to. - shared = X where X is 1 or 0. Corresponds to rdp.settings.privacy.default-sharing Registered user search in previous version If you previously had search enabled for registered users, you want to set privacy_level to 1 and rdp.settings.privacy.default-level to true . The original system for enabling registered users to use the search function was based on assigning a different role to all users. This has been discontinued, and needs to be manually switched for all existing users. This can be easily done by running the following command on your database (provided you have the original set of roles that came with the application, where ROLE_USER has id 2, and ROLE_MANAGER has id 3): update user_role set role_id = 2 where role_id = 3; International search There are few steps that need to be taken in order to make the international search available when migrating your old application to the new version that supports it. Firstly, a special user has to be created that will provide access to the remote instances. To do this, run the following command on your database. This account should not be used for any other purpose, which is why it's username and password are randomly generated by the following script. Note that in order for this command to be guaranteed to work, the RDMM application connected to this database must be shut down. INSERT INTO user ( email, enabled, password, privacy_level, description, last_name, name, shared, hide_genelist) VALUES(CONCAT(RAND(),\"@rdmm.com\"), 0, MD5(RAND()), 0, \"Remote admin profile\", \"\", \"\", false, false); INSERT INTO user_role (user_id,role_id) VALUES ((select max(user_id) from user), 1); INSERT INTO user_role (user_id,role_id) VALUES ((select max(user_id) from user), 2); SELECT max(user_id) from user; The last command will output an information that you will need in the next step. It will look like this: +--------------+ | max(user_id) | +--------------+ | 550 | +--------------+ 1 row in set (0.00 sec) Make note of the number in the box (550 in the above example). With this information in hand, you will need to update your application-prod.properties file: ## whether to enable international searching rdp.settings.isearch.enabled=true ## whether international search is selected by default rdp.settings.isearch.default-on=false ## urls of international instances to search when enabled. Separate with a comma rdp.settings.isearch.apis= ## Admin user id used for authenticated remote search. Not using 1 or 2 because those are IDs frequently used in tests. If changed, also update data.sql rdp.settings.isearch.user-id=550 ## Token used for remote search with administrative rights. Obtain from RDMM program coordinator. rdp.settings.isearch.search-token=XXXX ## Tokens for remote requests that authorize administrative access. Usually equal to the search-token, but can contain multiple entries separated by comma. rdp.settings.isearch.auth-tokens=XXXX Use the number you noted in the previous step for the rdp.settings.isearch.user-id line. You can obtain the values for lines rdp.settings.isearch.apis , rdp.settings.isearch.search-token and rdp.settings.isearch.auth-tokens from the central network administrator. The search-token and auth-tokens are highly confidential information, and we ask you to not share them with anyone, since if would compromise the security of the whole network. It is possible that as new international partners register to the network, we will provide you with updated values for the rdp.settings.isearch.apis line. Or in case of a security breach, we might ask you to update your search-token and auth-tokens. Custom taxon ordering A new property for taxa has been introduced, that allows a custom order of taxa in the dropdown menus. You can customize the order by running the following commands on your database. Just edit the ordering=X number to represent what position you would like the taxon to be on. You can skip taxa that you do not use (i.e. that are not active): update taxon set ordering = 1 where common_name = \"human\"; update taxon set ordering = 2 where common_name = \"mouse\"; update taxon set ordering = 3 where common_name = \"rat\"; update taxon set ordering = 4 where common_name = \"zebrafish\"; update taxon set ordering = 5 where common_name = \"fruit fly\"; update taxon set ordering = 6 where common_name = \"roundworm\"; update taxon set ordering = 7 where common_name = \"yeast\"; update taxon set ordering = 8 where common_name = \"e. coli\"; New FAQs There are new categories talking about the now available privacy and sharing options. You can use our updated faq file (see the faq.properties file in our github repository), or add the new categories manually to your existing file. Start the application After finishing all the steps, you can start your RDMM application again and test if everything works as expected.","title":"Migrate from previous releases"},{"location":"migration/#migrate-from-previous-releases","text":"Your current data should not be lost while migrating, but you should definitely have a database backup in case things go wrong for any reason. Read about database backup options for MySQL . First, take down your running instance to make sure that the previous release will not interfere with the migration process. Then, run the newer application release with the following parameter in application.properties : spring.datasource.initialize=true which will update the database to support the latest model definitions. If you get any errors during any part of the following process, please contact us. Once the update is successful, you should revert the option back to false to speed up future restarts. Take a look in the sections below for version-specific migration procedures. As of 1.3.2, database migrations are automated with Flyway which will run at startup of the application. This behaviour can be disabled with the following parameter in application.properties : flyway.enabled=false","title":"Migrate from previous releases"},{"location":"migration/#migrate-from-13-to-14","text":"Gene informations are now stored in the database. As a result, taxons are known for ortholog genes and the ortholog_taxon column has become unnecessary, and a source of error for Hibernate. V1.4.0__drop_ortholog_target_taxon.sql","title":"Migrate from 1.3 to 1.4"},{"location":"migration/#migrate-from-13x-to-132","text":"NCBI gene broke because they introduced genes with unexpected date format. We adjusted our parsing code to process date formats and now store a DATE type in the database. V1.3.2__fix_gene_modification_date_type.sql","title":"Migrate from 1.3.x to 1.3.2"},{"location":"migration/#migrate-from-version-11x-to-12","text":"There are new security settings that can be added to your application.properties file. See the section 'Privacy and search Defaults' in the 'Customize Settings' example file. The new security settings will have to be back-filled for the users that have registered prior to this update. This can be done by directly editing the database entries like so: update user set hide_genelist = 0, privacy_level = 0, shared = 1; The values of these settings should correspond with the defaults you have set in your application-prod.properties file. Specifically: - hide_genelist = X if X =1, hides users gene list from public searches. is only effective when the setting rdp.settings.privacy.allow-hide-genelist is enabled. - privacy_level = X where X is the privacy level. Should have the same value as rdp.settings.privacy.default-level , or whatever the users prior to this update agreed to. - shared = X where X is 1 or 0. Corresponds to rdp.settings.privacy.default-sharing","title":"Migrate from version 1.1.x to 1.2"},{"location":"migration/#registered-user-search-in-previous-version","text":"If you previously had search enabled for registered users, you want to set privacy_level to 1 and rdp.settings.privacy.default-level to true . The original system for enabling registered users to use the search function was based on assigning a different role to all users. This has been discontinued, and needs to be manually switched for all existing users. This can be easily done by running the following command on your database (provided you have the original set of roles that came with the application, where ROLE_USER has id 2, and ROLE_MANAGER has id 3): update user_role set role_id = 2 where role_id = 3;","title":"Registered user search in previous version"},{"location":"migration/#international-search","text":"There are few steps that need to be taken in order to make the international search available when migrating your old application to the new version that supports it. Firstly, a special user has to be created that will provide access to the remote instances. To do this, run the following command on your database. This account should not be used for any other purpose, which is why it's username and password are randomly generated by the following script. Note that in order for this command to be guaranteed to work, the RDMM application connected to this database must be shut down. INSERT INTO user ( email, enabled, password, privacy_level, description, last_name, name, shared, hide_genelist) VALUES(CONCAT(RAND(),\"@rdmm.com\"), 0, MD5(RAND()), 0, \"Remote admin profile\", \"\", \"\", false, false); INSERT INTO user_role (user_id,role_id) VALUES ((select max(user_id) from user), 1); INSERT INTO user_role (user_id,role_id) VALUES ((select max(user_id) from user), 2); SELECT max(user_id) from user; The last command will output an information that you will need in the next step. It will look like this: +--------------+ | max(user_id) | +--------------+ | 550 | +--------------+ 1 row in set (0.00 sec) Make note of the number in the box (550 in the above example). With this information in hand, you will need to update your application-prod.properties file: ## whether to enable international searching rdp.settings.isearch.enabled=true ## whether international search is selected by default rdp.settings.isearch.default-on=false ## urls of international instances to search when enabled. Separate with a comma rdp.settings.isearch.apis= ## Admin user id used for authenticated remote search. Not using 1 or 2 because those are IDs frequently used in tests. If changed, also update data.sql rdp.settings.isearch.user-id=550 ## Token used for remote search with administrative rights. Obtain from RDMM program coordinator. rdp.settings.isearch.search-token=XXXX ## Tokens for remote requests that authorize administrative access. Usually equal to the search-token, but can contain multiple entries separated by comma. rdp.settings.isearch.auth-tokens=XXXX Use the number you noted in the previous step for the rdp.settings.isearch.user-id line. You can obtain the values for lines rdp.settings.isearch.apis , rdp.settings.isearch.search-token and rdp.settings.isearch.auth-tokens from the central network administrator. The search-token and auth-tokens are highly confidential information, and we ask you to not share them with anyone, since if would compromise the security of the whole network. It is possible that as new international partners register to the network, we will provide you with updated values for the rdp.settings.isearch.apis line. Or in case of a security breach, we might ask you to update your search-token and auth-tokens.","title":"International search"},{"location":"migration/#custom-taxon-ordering","text":"A new property for taxa has been introduced, that allows a custom order of taxa in the dropdown menus. You can customize the order by running the following commands on your database. Just edit the ordering=X number to represent what position you would like the taxon to be on. You can skip taxa that you do not use (i.e. that are not active): update taxon set ordering = 1 where common_name = \"human\"; update taxon set ordering = 2 where common_name = \"mouse\"; update taxon set ordering = 3 where common_name = \"rat\"; update taxon set ordering = 4 where common_name = \"zebrafish\"; update taxon set ordering = 5 where common_name = \"fruit fly\"; update taxon set ordering = 6 where common_name = \"roundworm\"; update taxon set ordering = 7 where common_name = \"yeast\"; update taxon set ordering = 8 where common_name = \"e. coli\";","title":"Custom taxon ordering"},{"location":"migration/#new-faqs","text":"There are new categories talking about the now available privacy and sharing options. You can use our updated faq file (see the faq.properties file in our github repository), or add the new categories manually to your existing file.","title":"New FAQs"},{"location":"migration/#start-the-application","text":"After finishing all the steps, you can start your RDMM application again and test if everything works as expected.","title":"Start the application"}]}